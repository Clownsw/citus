Parsed test spec with 3 sessions

starting permutation: s2-begin s2-create_distributed_table s3-create_distributed_table s2-commit
create_distributed_table
---------------------------------------------------------------------

(1 row)

step s2-begin:
	BEGIN;

step s2-create_distributed_table:
	SELECT create_distributed_table('concurrent_table_2', 'id', colocate_with := 'concurrent_table_1');

create_distributed_table
---------------------------------------------------------------------

(1 row)

step s3-create_distributed_table:
	SELECT create_distributed_table('concurrent_table_3', 'id', colocate_with := 'concurrent_table_1');

create_distributed_table
---------------------------------------------------------------------

(1 row)

step s2-commit:
	COMMIT;


starting permutation: s2-begin s2-create_distributed_table s1-move-shard-logical s2-commit s3-sanity-check s3-sanity-check-2
create_distributed_table
---------------------------------------------------------------------

(1 row)

step s2-begin:
	BEGIN;

step s2-create_distributed_table:
	SELECT create_distributed_table('concurrent_table_2', 'id', colocate_with := 'concurrent_table_1');

create_distributed_table
---------------------------------------------------------------------

(1 row)

step s1-move-shard-logical:
	WITH shardid AS (SELECT shardid FROM pg_dist_shard where logicalrelid = 'concurrent_table_1'::regclass ORDER BY shardid LIMIT 1)
 	SELECT citus_move_Shard_placement(shardid.shardid, 'localhost', 57637, 'localhost', 57638) FROM shardid;
 <waiting ...>
step s2-commit: 
	COMMIT;

step s1-move-shard-logical: <... completed>
citus_move_shard_placement
---------------------------------------------------------------------

(1 row)

step s3-sanity-check:
	SELECT count(*) FROM pg_dist_shard LEFT JOIN pg_dist_shard_placement USING(shardid) WHERE nodename IS NULL;

count
---------------------------------------------------------------------
    0
(1 row)

step s3-sanity-check-2:
	SELECT count(*) FROM concurrent_table_1 JOIN concurrent_table_2 USING (id);

count
---------------------------------------------------------------------
    0
(1 row)


starting permutation: s2-begin s2-create_distributed_table s1-move-shard-block s2-commit s3-sanity-check s3-sanity-check-2
create_distributed_table
---------------------------------------------------------------------

(1 row)

step s2-begin:
	BEGIN;

step s2-create_distributed_table:
	SELECT create_distributed_table('concurrent_table_2', 'id', colocate_with := 'concurrent_table_1');

create_distributed_table
---------------------------------------------------------------------

(1 row)

step s1-move-shard-block:
	WITH shardid AS (SELECT shardid FROM pg_dist_shard where logicalrelid = 'concurrent_table_1'::regclass ORDER BY shardid LIMIT 1)
 	SELECT citus_move_Shard_placement(shardid.shardid, 'localhost', 57637, 'localhost', 57638, 'block_writes') FROM shardid;
 <waiting ...>
step s2-commit: 
	COMMIT;

step s1-move-shard-block: <... completed>
citus_move_shard_placement
---------------------------------------------------------------------

(1 row)

step s3-sanity-check:
	SELECT count(*) FROM pg_dist_shard LEFT JOIN pg_dist_shard_placement USING(shardid) WHERE nodename IS NULL;

count
---------------------------------------------------------------------
    0
(1 row)

step s3-sanity-check-2:
	SELECT count(*) FROM concurrent_table_1 JOIN concurrent_table_2 USING (id);

count
---------------------------------------------------------------------
    0
(1 row)

